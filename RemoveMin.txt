import java.util.ArrayList;

/*****************
* Main function - 
*
	public static void main(String[] args) {
		PQ pq = new PQ();
		int choice = s.nextInt();
		while(choice != -1) {
			switch(choice) {
				case 1 : // insert
					int element = s.nextInt();
					pq.insert(element);
					break;
				case 2 : // getMin
				try {
					System.out.println(pq.getMin());
				} catch (PriorityQueueException e) {
					return;
				}
					break;
				case 3 : // removeMin
				try {
					System.out.println(pq.removeMin());
				} catch (PriorityQueueException e) {
					return;
				}
					break;
				case 4 : // size
					System.out.println(pq.size());
					break;
				case 5 : // isEmpty
					System.out.println(pq.isEmpty());
				default :
						return;
			}
			choice = s.nextInt();
		}
	}
*******************/

class PriorityQueueException extends Exception {

}

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty(){
		return heap.size() == 0;
	}

	int size(){
		return heap.size();
	}

	int getMin() throws PriorityQueueException{
		if(isEmpty()){
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element){
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while(childIndex > 0){
			if(heap.get(childIndex) < heap.get(parentIndex)){
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			}else{
				return;
			}
		}
	}

	int removeMin() throws PriorityQueueException {
        if(isEmpty()){
			// Throw an exception
			throw new PriorityQueueException();
		}
        else
        {
           int  temp= heap.get(size()-1);
            int min=heap.get(0);
            heap.remove(size()-1);
            heap.set(0,temp);
            int parentIndex=0;
            int childIndex1=1;
            int childIndex2=2;
            while(childIndex1<heap.size())
            {
                int minIndex=parentIndex;
                if(heap.get(childIndex1)<heap.get(minIndex))
                {
                    minIndex=childIndex1;
                }
                if(childIndex2<heap.size() && (heap.get(childIndex2)<heap.get(minIndex)))
                {
                    minIndex=childIndex2;
                }
               if(minIndex==parentIndex)
                   break;
                
                int temp1=heap.get(minIndex);
                heap.set(minIndex,heap.get(parentIndex));
                heap.set(parentIndex,temp1);
                parentIndex=minIndex;
                childIndex1=2*parentIndex+1;
                childIndex2=2*parentIndex+2;
            }
            return min;
        }
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
	}
}

