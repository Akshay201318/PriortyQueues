public class Solution {
    
    
    
    
    public static void downHeapify(int arr[], int i, int n)
    {
        int parentIndex=i;
        int leftChildIndex=2*parentIndex+1;
        int rightChildIndex=2*parentIndex+2;
        while(leftChildIndex<n)
        {
            int minIndex=parentIndex;
            if(arr[leftChildIndex]<arr[minIndex])
                minIndex=leftChildIndex;
            if(rightChildIndex<n && (arr[rightChildIndex]<arr[minIndex]))
                minIndex=rightChildIndex;
            if(minIndex==parentIndex)
                break;
            
            int temp=arr[minIndex];
            arr[minIndex]=arr[parentIndex];
            arr[parentIndex]=temp;
            parentIndex=minIndex;
            leftChildIndex=2*parentIndex+1;
            rightChildIndex=2*parentIndex+2;
        }
    }

	public static void inplaceHeapSort(int input[]) {
		int n=input.length;
        
        for(int i=n/2-1;i>=0;i--)
        {
            downHeapify(input,i,n);
        }
        
        for(int i=n-1;i>=0;i--)
        {
            int temp=input[0];
            input[0]=input[i];
            input[i]=temp;
            downHeapify(input,0,i);
        }
		
	}
}